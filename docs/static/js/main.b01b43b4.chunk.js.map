{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","cat","console","log","warn","type","value","onChange","target","placeholder","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,mCACE,sBAAMC,UAAU,GAAGC,SAdF,SAACC,GACpBA,EAAEC,iBACEL,GACFF,GAAc,SAACQ,GAAD,OAAUN,GAAV,mBAAyBM,OACvCL,EAAc,IACdM,QAAQC,IAAI,eAAgBR,KAE5BC,EAAc,IACdM,QAAQE,KAAK,qBAMb,SACE,uBAAOC,KAAK,OAAOC,MAAOX,EAAYY,SAlBlB,SAACR,GACzBH,EAAcG,EAAES,OAAOF,QAiBgDG,YAAa,oBAOxFjB,EAAYkB,UAAY,CACtBjB,cAAekB,IAAUC,KAAKC,Y,mCC/BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAGrCf,QAAQC,IAAIoB,GAZO,kBAaZA,GAbY,4CAAH,sDCiBLO,EAdK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,sBAAKpB,UAAU,6CAAf,UACE,qBAAKkC,IAAKd,EAAKe,IAAKL,IACpB,4BAAIA,QCoBKM,EAtBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEjB,ECJ0B,SAACA,GAC3B,MAA0BrB,mBAAS,CACjC4B,KAAM,GACNY,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAKAC,qBAAU,WACRlB,EAAMJ,KACL,CAACA,IAEJ,IAAMI,EAAK,uCAAG,WAAOlB,GAAP,eAAAe,EAAA,sEACMF,EAAQb,GADd,OACNwB,EADM,OAEZW,EAAS,CAAEd,KAAMG,EAAKS,SAAS,IAFnB,2CAAH,sDAKX,OAAOC,EDXwBG,CAAavB,GAAhCa,EAAZ,EAAON,KAAaY,EAApB,EAAoBA,QAGpB,OACE,qCACE,6BAAKnB,IACFmB,GAAW,4CACd,qBAAKrC,UAAU,YAAf,SACG+B,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEZnBa,EAAe,WAC1B,MAAoC7C,mBAAS,IAA7C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAEA,OACE,qCACE,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,8BACG+C,EAAWhB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCTxB0B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.b01b43b4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue) {\n      setCategories((cat) => [inputValue, ...cat]);\n      setInputValue(\"\");\n      console.log(\"submit hecho\", inputValue);\n    } else {\n      setInputValue(\"\");\n      console.warn(\"Ingresa un dato\");\n    }\n  };\n\n  return (\n    <>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} placeholder={\"Buscar Gif\"} />\n      </form>\n    </>\n  );\n};\n\n// Obliga los argumentos y el tipo\nAddCategory.prototype = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3943VVjWEmLud8vl7BGHO9MqeG33ZGe9`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n    console.log(gifs);\n    return gifs;\n  };","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__backInLeft\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string,\n  url: PropTypes.string,\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n\n  const {data:images, loading} = useFetchGifs(category);\n\n\n  return (\n    <>\n      <h3>{category}</h3>\n        {loading && <p>Cargando...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    fetch(category);\n  }, [category]);\n\n  const fetch = async (cat) => {\n    const img = await getGifs(cat);\n    setState({ data: img, loading: false });\n  };\n\n  return state; // {data:[], loading: true}\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n\n      <AddCategory setCategories={setCategories} />\n      {/* <button onClick={handleAdd}>Agregar</button> */}\n      <div>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\nimport 'animate.css'\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}